package core.network;

import java.io.DataInputStream;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Logger;

import neutrino.Environment;
import neutrino.PacketsInformation.ServerEvents;
import neutrino.RoomManager.Room;
import neutrino.System.ServerMessage;
import neutrino.UserManager.Habbo;
import neutrino.UserManager.UserManager;

import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelStateEvent;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.SimpleChannelUpstreamHandler;

import core.game.users.Session;

public class SocketHandler extends SimpleChannelUpstreamHandler {
	private static final Logger logger = Logger.getLogger(
            SocketHandler.class.getName());
    private static int Sessions = 1;

    public DataInputStream inreader;
    public ChannelBuffer in;
    private final AtomicLong transferredBytes = new AtomicLong();
    public Channel Socket;

    public long getTransferredBytes() {
        return transferredBytes.get();
    }
    
    // And now, all code to make sockets work!
    public Session GetSession()
    {
    	return Session.SessionsByChannels.get(Socket);
    }
    
    @Override
    public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e)
    {
    	// When ChannelConnected, we set the socket and create a new session of it
    	core.Environment.WriteDebug("Channel #dontknow connected");
        this.Socket = e.getChannel();
        if(GetSession() == null)
        	Session.SetSession(Socket, this, Sessions); Sessions++;
    }
    
    @Override
    public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception
    {
    	// disconnect
    }
      
    @Override
    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception
    {
    	// packet received
    }
}
