package com.sulake.habbo.communication.messages.outgoing.userinformation;

import java.util.Iterator;
import java.util.*;

import neutrino.ItemManager.ItemInformation;
import neutrino.ItemManager.UserItem;
import neutrino.Network.ServerHandler;
import neutrino.PacketsInformation.ServerEvents;
import neutrino.System.ServerMessage;
import neutrino.UserManager.Friend;
import neutrino.UserManager.Habbo;

public class TradeObjectMessageComposer {
	public static void Compose(ServerHandler Client, Habbo CurrentUser) throws Exception
	{
		Habbo User = CurrentUser;    
		int oId = User.TradingWith;
		Habbo oUser = Habbo.UsersbyId.get(User.TradingWith);
		int ItemToAdd = Client.inreader.readInt()/1024/30;
		User.TradingItems.add(ItemToAdd);
        ServerMessage Trade = new ServerMessage(ServerEvents.TradeObject);
        Trade.writeInt(User.Id);
        Trade.writeInt(User.TradingItems.size());
        Iterator reader = User.TradingItems.iterator();
        List<Integer> SpriteIds = new ArrayList<Integer>();
        while(reader.hasNext())
        {
        	UserItem Item = UserItem.Items.get(((Integer)reader.next()));
            ItemInformation furniData = ItemInformation.Items.get(Item.ItemId);
            if(!SpriteIds.contains(furniData.SpriteId))
            {
            	Trade.writeInt(Item.Id*1024*30);
            	Trade.writeUTF(furniData.Type.toLowerCase());
                Trade.writeInt(Item.Id);
                Trade.writeInt(furniData.SpriteId);
                SpriteIds.add(furniData.SpriteId);
                Iterator ureader = User.TradingItems.iterator();
                int Amount = 0;
                while(reader.hasNext())
                {
                	UserItem uItem = UserItem.Items.get(((Integer)ureader.next()));
                    ItemInformation ufurniData = ItemInformation.Items.get(uItem.ItemId);
                    if(ufurniData.SpriteId == furniData.SpriteId)
                    	Amount++;
                }
                Trade.writeInt(Amount);
                Trade.writeBoolean(true);
                Trade.writeInt(0);
                Trade.writeUTF(""); // extradata
                Trade.writeInt(0); // day of furni
                Trade.writeInt(0); // month of furni
                Trade.writeInt(0); // year of furni
                Trade.writeInt(0); // final 0
            }
        }
        Trade.writeInt(oUser.Id);
        Trade.writeInt(oUser.TradingItems.size());
        Iterator oreader = oUser.TradingItems.iterator();
        List<Integer> oSpriteIds = new ArrayList<Integer>();
        while(reader.hasNext())
        {
        	UserItem Item = UserItem.Items.get(((Integer)oreader.next()));
            ItemInformation furniData = ItemInformation.Items.get(Item.ItemId);
            if(!SpriteIds.contains(furniData.SpriteId))
            {
            	Trade.writeInt(Item.Id*1024*30);
            	Trade.writeUTF(furniData.Type.toLowerCase());
                Trade.writeInt(Item.Id);
                Trade.writeInt(furniData.SpriteId);
                SpriteIds.add(furniData.SpriteId);
                Iterator ureader = User.TradingItems.iterator();
                int Amount = 0;
                while(reader.hasNext())
                {
                	UserItem uItem = UserItem.Items.get(((Integer)ureader.next()));
                    ItemInformation ufurniData = ItemInformation.Items.get(uItem.ItemId);
                    if(ufurniData.SpriteId == furniData.SpriteId)
                    	Amount++;
                }
                Trade.writeInt(Amount);
                Trade.writeBoolean(true);
                Trade.writeInt(0);
                Trade.writeUTF(""); // extradata
                Trade.writeInt(0); // day of furni
                Trade.writeInt(0); // month of furni
                Trade.writeInt(0); // year of furni
                Trade.writeInt(0); // final 0
            }
        }
        Trade.Send(Client.Socket);
        Trade.Send(oUser.CurrentSocket);

	}
}
