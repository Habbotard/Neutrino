package com.sulake.habbo.communication.messages.outgoing.administration;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.jboss.netty.channel.Channel;

import neutrino.Environment;
import neutrino.AdministrationManager.CallsForHelp;
import neutrino.AdministrationManager.Chatlog;
import neutrino.Network.ServerHandler;
import neutrino.PacketsInformation.ServerEvents;
import neutrino.RoomManager.Room;
import neutrino.System.ServerMessage;
import neutrino.UserManager.Habbo;

public class PickTicketMessageComposer {
	public static void Compose(ServerHandler Client, Habbo User, Environment Server) throws Exception
	{
		if(User.RankLevel < 5)
        {
			return;
        }
		Habbo CurrentUser = Client.GetSession();
        int UserId = Client.inreader.readInt();
        Channel Socket = Client.Socket;
        int CallForHelpID = Client.inreader.readInt();
        CallsForHelp C = CallsForHelp.Calls.get(CallForHelpID);
        if(C == null)
        	return;
        
        Habbo cUser = Habbo.UsersbyId.get(UserId);
        ServerMessage Issue = new ServerMessage(ServerEvents.MOD_PIKCUPISSUE);
		Issue.writeInt(C.Id); // id
        Issue.writeInt(C.State); // state 
        Issue.writeInt(1); // cat id
        Issue.writeInt(C.Category); // reported cat id
        Issue.writeInt((Environment.getIntUnixTimestamp() - C.Timestamp)); // timestamp
        Issue.writeInt(C.Priority); // priority
        Issue.writeInt(C.ReportedId); // reporter id
        Issue.writeUTF(Habbo.UsersbyId.get(C.ReporterId).UserName); // reporter name
        Issue.writeInt(C.ReportedId); // reported id
        Issue.writeUTF((Habbo.UsersbyId.containsKey(C.ReportedId)) ? Habbo.UsersbyId.get(C.ReportedId).UserName : "Usuario desconocido"); // reported name
        Issue.writeInt(User.Id); // mod id
        Issue.writeUTF(User.UserName); // mod name
        Issue.writeUTF(C.Message); // issue message
        Issue.writeInt(C.RoomId); // room id
        Room RoomData = Room.Rooms.get(C.RoomId);
        Issue.writeUTF(RoomData.Name); // room name
        Issue.Send(Socket);
        
	}
}
